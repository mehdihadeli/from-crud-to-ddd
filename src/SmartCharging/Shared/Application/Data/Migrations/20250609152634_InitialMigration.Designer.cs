// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartCharging.Shared.Application.Data;

#nullable disable

namespace SmartCharging.Shared.Application.Data.Migrations
{
    [DbContext(typeof(SmartChargingDbContext))]
    [Migration("20250609152634_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartCharging.Groups.Models.ChargeStation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_charge_stations");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_charge_stations_group_id");

                    b.ToTable("charge_stations", (string)null);
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.Connector", b =>
                {
                    b.Property<Guid>("ChargeStationId")
                        .HasColumnType("uuid")
                        .HasColumnName("charge_station_id");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("ChargeStationId", "Id")
                        .HasName("pk_connectors");

                    b.ToTable("connectors", (string)null);
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.ChargeStation", b =>
                {
                    b.HasOne("SmartCharging.Groups.Models.Group", null)
                        .WithMany("ChargeStations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charge_stations_groups_group_id");

                    b.OwnsOne("SmartCharging.Groups.Models.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ChargeStationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("ChargeStationId");

                            b1.ToTable("charge_stations");

                            b1.WithOwner()
                                .HasForeignKey("ChargeStationId")
                                .HasConstraintName("fk_charge_stations_charge_stations_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.Connector", b =>
                {
                    b.HasOne("SmartCharging.Groups.Models.ChargeStation", null)
                        .WithMany("Connectors")
                        .HasForeignKey("ChargeStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connectors_charge_stations_charge_station_id");

                    b.OwnsOne("SmartCharging.Groups.Models.ValueObjects.CurrentInAmps", "MaxCurrentInAmps", b1 =>
                        {
                            b1.Property<Guid>("ConnectorChargeStationId")
                                .HasColumnType("uuid")
                                .HasColumnName("charge_station_id");

                            b1.Property<int>("ConnectorId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("max_current_in_amps");

                            b1.HasKey("ConnectorChargeStationId", "ConnectorId");

                            b1.ToTable("connectors");

                            b1.WithOwner()
                                .HasForeignKey("ConnectorChargeStationId", "ConnectorId")
                                .HasConstraintName("fk_connectors_connectors_charge_station_id_id");
                        });

                    b.Navigation("MaxCurrentInAmps")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.Group", b =>
                {
                    b.OwnsOne("SmartCharging.Groups.Models.ValueObjects.CurrentInAmps", "CapacityInAmps", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("capacity_in_amps");

                            b1.HasKey("GroupId");

                            b1.ToTable("groups");

                            b1.WithOwner()
                                .HasForeignKey("GroupId")
                                .HasConstraintName("fk_groups_groups_id");
                        });

                    b.OwnsOne("SmartCharging.Groups.Models.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("GroupId");

                            b1.ToTable("groups");

                            b1.WithOwner()
                                .HasForeignKey("GroupId")
                                .HasConstraintName("fk_groups_groups_id");
                        });

                    b.Navigation("CapacityInAmps")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.ChargeStation", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("SmartCharging.Groups.Models.Group", b =>
                {
                    b.Navigation("ChargeStations");
                });
#pragma warning restore 612, 618
        }
    }
}
